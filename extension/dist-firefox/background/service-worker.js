var c=typeof self.browser<"u"?self.browser:chrome;console.log("üöÄ [Background] Service worker loaded, registering command listener...");c.commands.onCommand.addListener(async t=>{console.log("‚å®Ô∏è [Background] ===== KEYBOARD COMMAND RECEIVED ====="),console.log("‚å®Ô∏è [Background] Command:",t),console.log("‚å®Ô∏è [Background] Timestamp:",new Date().toISOString());try{const e=await c.tabs.query({active:!0,currentWindow:!0});console.log("üìã [Background] Active tabs:",e);const o=e&&e.length>0?e[0]:null;t==="toggle-overlay"?(console.log("üéØ [Background] Toggle overlay command matched!"),console.log("üéØ [Background] Tab ID:",o==null?void 0:o.id),console.log("üéØ [Background] Tab URL:",o==null?void 0:o.url),o?(console.log("‚úÖ [Background] Calling toggleOverlay..."),await u(o),console.log("‚úÖ [Background] toggleOverlay completed")):console.error("‚ùå [Background] No active tab found")):console.log("‚ö†Ô∏è [Background] Unknown command:",t)}catch(e){console.error("‚ùå [Background] Error handling command:",e),console.error("‚ùå [Background] Error stack:",e.stack)}});console.log("‚úÖ [Background] Command listener registered successfully");c.action&&c.action.onClicked?c.action.onClicked.addListener(async t=>{await u(t)}):c.browserAction&&c.browserAction.onClicked&&c.browserAction.onClicked.addListener(async t=>{await u(t)});async function u(t){if(console.log("üîÑ [Background] toggleOverlay called"),console.log("üîÑ [Background] Tab object:",t),!t||!t.id){console.error("‚ùå [Background] Invalid tab object");return}console.log("üîÑ [Background] Tab ID is valid:",t.id);const e=t.url||"";if(console.log("üîÑ [Background] Tab URL:",e),e.startsWith("chrome://")||e.startsWith("chrome-extension://")||e.startsWith("about:")){console.log("Cannot inject content script on restricted page:",e);return}console.log("üéØ [Background] Toggling overlay for tab:",t.id,e);try{await c.tabs.sendMessage(t.id,{type:"toggle_overlay"})}catch{console.log("Content script not found, injecting...");try{c.scripting&&c.scripting.executeScript?await c.scripting.executeScript({target:{tabId:t.id},files:["content/content-script.js"]}):await c.tabs.executeScript(t.id,{file:"content/content-script.js"}),await new Promise(r=>setTimeout(r,100)),await c.tabs.sendMessage(t.id,{type:"toggle_overlay"})}catch(r){console.error("Failed to inject content script:",r)}}}c.runtime.onMessage.addListener((t,e,o)=>(w(t,e,o),!0));async function w(t,e,o){var r,s;try{switch(console.log("üì® [Background] Received message:",{type:t.type,hasMessage:!!t.message,selectedTabsCount:((r=t.selectedTabs)==null?void 0:r.length)||0,model:t.model,sender:(s=e.tab)==null?void 0:s.id}),t.type){case"GET_CURRENT_TAB":await y(o);break;case"GET_ALL_TABS":await h(o);break;case"EXTRACT_TAB_CONTENT":await k(t.tabId,o);break;case"GET_SELECTED_TEXT":await b(e.tab.id,o);break;case"CAPTURE_SCREENSHOT":await m(e.tab,o);break;case"API_REQUEST":await B(t,o);break;default:console.warn("‚ö†Ô∏è [Background] Unknown message type:",t.type),o({success:!1,error:"Unknown message type"})}}catch(l){console.error("‚ùå [Background] Error handling message:",l),o({success:!1,error:l.message})}}async function y(t){try{const e=await c.tabs.query({active:!0,currentWindow:!0}),o=e&&e.length>0?e[0]:null;t(o?{success:!0,tab:{id:o.id,title:o.title,url:o.url,favIconUrl:o.favIconUrl}}:{success:!1,error:"No active tab found"})}catch(e){t({success:!1,error:e.message})}}async function g(t){if(!t)return null;if(t.startsWith("data:"))return t;try{const e=new URL(t),o=e.protocol;if(!["http:","https:"].includes(o)||e.hostname==="localhost"||e.hostname==="127.0.0.1")return null;const r=await fetch(t,{credentials:"omit"});if(!r.ok)return null;const s=await r.blob();return await new Promise((l,a)=>{const n=new FileReader;n.onloadend=()=>l(n.result),n.onerror=a,n.readAsDataURL(s)})}catch(e){return console.debug("‚ö†Ô∏è Skipping favicon conversion:",t,(e==null?void 0:e.message)||e),null}}async function h(t){try{const e=await c.tabs.query({active:!0,currentWindow:!0}),o=e&&e.length>0?e[0]:null,r=o==null?void 0:o.id;console.log("üéØ [Background] Current active tab ID:",r,"Title:",o==null?void 0:o.title);const s=await c.tabs.query({}),l=await Promise.all(s.map(async a=>{let n=null;if(a.favIconUrl&&(n=await g(a.favIconUrl)),!n&&a.url)try{const f=`https://www.google.com/s2/favicons?domain=${new URL(a.url).hostname}&sz=32`;n=await g(f)}catch{console.error("Failed to get Google favicon for:",a.url)}const i=a.id===r;return i&&console.log("‚úÖ [Background] Marking tab as active:",a.title),{id:a.id,title:a.title,url:a.url,favIconUrl:n||a.favIconUrl,active:i}}));t({success:!0,tabs:l})}catch(e){t({success:!1,error:e.message})}}async function k(t,e){var o;try{const r=await c.tabs.sendMessage(t,{type:"get_page_content"});if(r&&r.success){const s=((o=r.context)==null?void 0:o.content)||"";e({success:!0,content:s})}else e({success:!1,error:"Failed to extract content"})}catch(r){console.error("[Background] Error extracting tab content:",r),e({success:!1,error:r.message})}}async function b(t,e){try{const o=await c.tabs.sendMessage(t,{type:"get_selected_text"});o&&o.success?e({success:!0,text:o.text}):e({success:!1,error:"No text selected"})}catch(o){e({success:!1,error:o.message})}}async function m(t,e){try{if(!t||!t.id){e({success:!1,error:"No active tab"});return}const o=await c.tabs.captureVisibleTab(t.windowId,{format:"png",quality:100});e({success:!0,dataUrl:o})}catch(o){console.error("[Background] Screenshot capture failed:",o),e({success:!1,error:o.message})}}async function B(t,e){const{method:o,endpoint:r,body:s}=t,l="http://localhost:3001";try{console.log(`üåê [Background] API ${o} ${r}`);const a={method:o||"GET",headers:{"Content-Type":"application/json"}};s&&(a.body=JSON.stringify(s));const n=await fetch(`${l}${r}`,a);if(!n.ok)throw new Error(`API request failed: ${n.status} ${n.statusText}`);const i=await n.json();e({success:!0,data:i})}catch(a){console.error("‚ùå [Background] API request failed:",a),e({success:!1,error:a.message})}}console.log("‚úÖ Speedy AI Background Service Worker loaded");
